/** Christian Virgen
*** Mini Project
*** Java II
*/





import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.util.function.Consumer;



public  class ChatClient {
	
	private int port;
	private String IP;

	
	private ChatThread thread = new ChatThread();
	private Consumer<Serializable> callback;
	
	public ChatClient(Consumer<Serializable> callback) {
		this.callback = callback;
		thread.setDaemon(true);
	}
	
	public ChatClient(String IP, int port, Consumer<Serializable> callback) {
		this.callback = callback;
		this.port = port;
		this.IP = IP;
	}
	
	public void startConnection() throws Exception{
		thread.start();
	}
	
	public void send(Serializable data) throws Exception{
		thread.out.writeObject(data);
	}
	
	public void closeConnection() throws Exception{
		thread.socket.close();
	}
	
	
	
	private int getPort() {
		return port;
	}
	
	private String getIP() {
		return IP;
	}
	
	private class ChatThread extends Thread{

		
		private Socket socket;
		private ObjectOutputStream out;

		@Override
		public void run() {
			try {
				socket = new Socket(getIP(), getPort());
				ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
				ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
				
				this.out = out;
				this.socket =  socket;

				
				while(true) {
					Serializable data = (Serializable)in.readObject();
					callback.accept(data);
					
				}
				
				
				
			}catch(Exception e) {
				callback.accept("Connection closed");
			}
		}
		
	}

	

}

-----------------------------------------------------------------
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.function.Consumer;

import javafx.application.Application;
import javafx.scene.control.TextArea;
import javafx.stage.Stage;

public  class ChatServer {
	
	private int port;

	
	private ChatThread thread = new ChatThread();
	private Consumer<Serializable> callback;
	
	public ChatServer(Consumer<Serializable> callback) {
		this.callback = callback;
		thread.setDaemon(true);
	}
	
	public ChatServer(int port, Consumer<Serializable> callback) {
		this.callback = callback;
		this.port = port;
	}
	
	public void startConnection() throws Exception{
		thread.start();
	}
	
	public void send(Serializable data) throws Exception{
		thread.out.writeObject(data);
	}
	
	public void closeConnection() throws Exception{
		thread.socket.close();
	}
	
	
	
	private int getPort() {
		return port;
	}
	
	private class ChatThread extends Thread{

		
		private Socket socket;
		private ObjectOutputStream out;

		@Override
		public void run() {
			try {
				ServerSocket server = new ServerSocket(getPort());
				Socket socket = server.accept();
				ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
				ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
				
				this.out = out;
				
				while(true) {
					Serializable data = (Serializable)in.readObject();
					callback.accept(data);
					
				}
				
				
				
			}catch(Exception e) {
				callback.accept("Connection closed");
			}
		}
		
	}

	

}



-----------------------------------------------------------------


import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ClientGUI extends Application{
	
	private TextArea messages = new TextArea();
	private ChatClient connection = createClient();
	
	private Parent chat() {
		messages.setPrefHeight(500);
		TextField input = new TextField();
		
		input.setOnAction(event ->{
		String message =  "Client: ";
		message += input.getText();
		input.clear();
		
		messages.appendText(message + "\n");
		try {
			connection.send(message);
			
		}catch(Exception e) {
			messages.appendText("Failed to send");
		}
		});
		
		VBox root = new VBox(20, messages, input);
		root.setPrefSize(600,600);
		return root;
		
	}
	
	@Override public void init() throws Exception{
		connection.startConnection();
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		
		primaryStage.setScene(new Scene(chat()));
		primaryStage.show();
		
	}
	
	public void stop() throws Exception{
		connection.closeConnection();
	}
	
	private ChatClient createClient() {
		return new ChatClient("127.0.0.1", 56789, data ->{
			Platform.runLater(() ->{
				messages.appendText(data.toString() + "\n");
			});
		});
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	
}



-----------------------------------------------------------------
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ServerGUI extends Application{
	
	private TextArea messages = new TextArea();
	private ChatServer connection = createServer();
	
	private Parent chat() {
		messages.setPrefHeight(500);
		TextField input = new TextField();
		
		input.setOnAction(event ->{
		String message =  "Server: ";
		message += input.getText();
		input.clear();
		
		messages.appendText(message + "\n");
		try {
			connection.send(message);
			
		}catch(Exception e) {
			messages.appendText("Failed to send");
		}
		});
		
		VBox root = new VBox(20, messages, input);
		root.setPrefSize(600,600);
		return root;
		
	}
	
	@Override public void init() throws Exception{
		connection.startConnection();
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		
		primaryStage.setScene(new Scene(chat()));
		primaryStage.show();
		
	}
	
	public void stop() throws Exception{
		connection.closeConnection();
	}
	
	private ChatServer createServer() {
		return new ChatServer(56789, data ->{
			Platform.runLater(() ->{
				messages.appendText(data.toString() + "\n");
			});
		});
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	
}


-----------------------------------------------------------------